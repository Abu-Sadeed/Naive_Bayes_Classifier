install.packages("naivebayes")
clear
######Implementation#######
library(naivebayes)
?naivebayes
?naive_bayes
# Data
data <- read.csv(file.choose(), header = TRUE)
head(data)
str(data)
# Data
data <- read.csv(file.choose(), header = TRUE)# For Simplicity lets pick binary data form data folder
head(data)
str(data)
# Correcting features with levels from "int" to "factor"
data$rank <- as.factor(data$rank)
data$admit <- as.factor(data$admit)
#Data Partition
# Set a Random Seed
set.seed(1234)
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.8, 0.2))
train <- data[ind == 1,]
test <- data[ind == 2,]
head(train)
head(test)
######Implementation#######
# Libraries
# Using "naivebayes" package - can be installed from cran. package "e1071" also contains it
library(naivebayes)
# Model
model <- naive_bayes(admit ~ ., data = train)
class(model)
# Model selecting "admit"
levels(data$admit)
# Prediction
pred <- predict(model, test)
# Confusion Matrix
cm <- table(test$admit, pred)
cm
accuracy <- sum(diag(cm)) / sum(cm)
install.packages("percent")
accuracy
accuracy <- percent(sum(diag(cm)) / sum(cm))
install.packages("scales")
accuracy <- label_percent(sum(diag(cm)) / sum(cm))
######Implementation#######
# Libraries
# Using "naivebayes" package - can be installed from cran. package "e1071" also contains it
library(scales)
accuracy <- label_percent(sum(diag(cm)) / sum(cm))
accuracy
?label_percent
accuracy <- sum(diag(cm)) / sum(cm)
label_percent(accuracy)
label_percent(accuracy/100)
percent(accuracy)
accuracy <- percent(sum(diag(cm)) / sum(cm))
accuracy
pred
cm
library(ggplot2)
# Creating a heat map of confusion matrix
ggplot(data = cm, aes(x=x, y=y, fill=value)) + geom_tile()
# Creating a heat map of confusion matrix
ggplot(cm, aes(x=x, y=y, fill=value)) + geom_tile()
?ggplot2
?heatmap
# Creating a heat map of confusion matrix
heatmap(cm)
?heatmap
# Creating a heat map of confusion matrix
heatmap(cm, colours = value)
# Creating a heat map of confusion matrix
heatmap(cm, colours = "red")
clear
cmDF <- as.data.frame(cm)
ggplot(cmDF, aes(x=x, y=y, fill=value)) + geom_tile()
ggplot(data = cmDF, aes(x=test, y=pred, fill=value)) + geom_tile()
ggplot(data = cmDF) + geom_tile()
cmDF
ggplot(data = cmDF, aes(x=pred, y=Freq, fill=value)) + geom_tile()
ggplot(data = cmDF, aes(x=pred, y=Freq)) + geom_tile()
ggplot(data = cmDF, aes(x=Var1, y=pred)) + geom_tile()
ggplot(data = cmDF, aes(x=Freq, y=pred)) + geom_tile()
heatmap(cmDF)
TClass <- factor(c(0, 0, 1, 1))
PClass <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
View(df)
View(cmDF)
ggplot(data = cmDF, mapping = aes(x = Var1, y = pred)) + geom_tile()
ggplot(data = cmDF, mapping = aes(x = pred, y = Var1)) + geom_tile()
ggplot(data = cmDF, mapping = aes(x = Var1, y = pred)) + geom_tile()
ggplot(data = cmDF, mapping = aes(x = Var1, y = pred)) + geom_tile(aes(fill = Freq), colour = "white")
ggplot(data = cmDF, mapping = aes(x = Var1, y = pred)) + geom_tile(aes(fill = Freq), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1)
cm
ggplot(data = cmDF, mapping = aes(x = pred, y = Var1)) + geom_tile(aes(fill = Freq), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1)
